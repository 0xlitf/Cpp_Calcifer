// CPPPrimer_10.cpp : 泛型算法
//

#include "stdafx.h"
#include <algorithm>

using namespace std;
int _tmain(int argc, _TCHAR* argv[])
{

	



	return 0;
}
/*CPPPrimer_10 泛型算法
	顺序容器之定义了很少的操作：在大多数情况下，我们可以添加和删除元素，访问首尾元素，确定容器是否为空以及
	获得指向首元素或尾元素之后的迭代器。
	标准库并未给每个容器都定义成员函数来实现这些操作，而是定义了一组泛型算法（generic algorithm）：
	称他们为算法。

10.1 概述
	大多数算法定义在algorithm中，标准库还在头文件numeric中定义了一组数值泛型算法。
	find(v.cbegin(),v.cend(),0);
	返回指向第一个等于给定值的元素的迭代器，如果范围中无匹配元素，则返回第二个参数来表示搜索失败。

	迭代器令算法不依赖于容器，……

	……，但算法依赖于元素类型的操作


10.2 初识泛型算法
	标准库提供了超过100个算法。
	除少数例外，标准库算法都对一个范围内的元素进行操作。
	我们将此元素范围称为“输入范围”。
	接受输入范围的算法总是使用前两个参数来表示此范围，两个参数分别是指向要处理的第一个元素和尾元素之后位置的迭代器。

	10.2.1 只读算法
		算法和元素类型
		
		操作两个序列的算法

	10.2.2 写容器元素的算法
		算法不检查写操作

		介绍back_inserter

		拷贝算法

	10.2.3 重排元素容器的算法
		消除重复单词

		使用unique

		使用容器操作删除元素

10.3 定制操作
	10.3.1 向算法传递函数
		谓词

		排序算法

	10.3.2 lambda表达式
		介绍lambda

		向lambda传递函数

		使用捕获列表

		调用find_if
		
		for_each算法

		完整的biggies

	10.3.3 lambda捕获和返回
		值捕获

		引用捕获

		隐式捕获

		可变lambda

		指定lambda返回类型

	10.3.4 参数绑定
		标准库bind函数

		绑定check_size的sz参数

		使用placeholders名字

		bind的参数

		用bind重排参数顺序

		绑定引用参数

10.4 再探迭代器
	10.4.1 插入迭代器

	10.4.2 iostream迭代器
		istream_iterator操作

		使用算法操作流迭代器

		istream_iterator允许使用惰性求值

		ostream_iterator操作

		使用流迭代器处理类类型

	10.4.3 反向迭代器
		反向迭代器需要递减操作符
			
		反向迭代器和其他迭代器间的关系
			
10.5 泛型算法结构
	10.5.1 5类迭代器
		迭代器类别：
			输入迭代器
			输出迭代器
			前向迭代器
			双向迭代器
			随机访问迭代器
	10.5.2 算法形参模式
		接受单个目标迭代器的算法

		接受第二个输入序列的算法

	10.5.3 算法命名规则
		一些算法使用重载形式传递一个谓词

		_if版本的算法

		区分拷贝元素的版本和不拷贝元素的版本

10.6 特定容器算法
	splice成员

	链表特有的操作会改变容器

*/